#!/usr/bin/env php
<?php
use Symfony\Component\Yaml\Yaml;
use Thunder\SimilarWebApi\AbstractRequest;

function generateRequestClass($class, $config)
    {
    $code = <<<EOF
<?php
namespace <NAMESPACE>;

use Thunder\SimilarWebApi\AbstractRequest;

final class <CLASS> extends AbstractRequest
    {
    public function __construct(<ARGS>)
        {
<METHODS>
        }

    public function getName()
        {
        return '<NAME>';
        }

    public function getUrl()
        {
        return '<URL>';
        }

    public function getMapping()
        {
        return <MAPPING>;
        }
    }

EOF;
    $args = array();
    $methods = array();
    preg_match_all('/\\{([a-zA-Z]+)\\}/', $config['url'], $matches);
    $names = array_diff($matches[1], array('path', 'format', 'token'));
    foreach($names as $name)
        {
        $args[] = '$'.$name;
        $methods[] = "\t\t".'$this->args[\''.$name.'\'] = $this->validateArg(\''.$name.'\', $'.$name.');';
        }
    $ns = 'Thunder\\SimilarWebApi\\Request';
    $replaces = array(
        '<NAMESPACE>' => $ns,
        '<CLASS>' => $class,
        '<NAME>' => $class,
        '<URL>' => AbstractRequest::API.str_replace('{path}', $config['path'], $config['url']),
        '<ARGS>' => implode(', ', $args),
        '<METHODS>' => implode("\n", $methods),
        '<MAPPING>' => var_export($config, true),
        );
    $code = str_replace(array_keys($replaces), array_values($replaces), $code);

    return $code;
    }

function generateResponseClass($name, $config)
    {
    $code = <<<EOF
<?php
namespace <NAMESPACE>;

use Thunder\SimilarWebApi\RawResponse;
use Thunder\SimilarWebApi\AbstractResponse;

final class <CLASS> extends AbstractResponse
    {
    public function __construct(RawResponse \$response)
        {
        parent::__construct(\$response);
        }

<METHODS>
    }

EOF;
    $methods = array();
    $calls = array(
        'values' => 'getValue',
        'arrays' => 'getArray',
        'maps' => 'getMap',
        'tuples' => 'getTuple',
        );
    foreach($calls as $type => $call)
        {
        if(array_key_exists($type, $config) && !empty($config[$type]))
            {
            foreach($config[$type] as $item => $fieldConfig)
                {
                $body = 'return $this->response->'.$call.'(\''.$item.'\');';
                $methods[] =  "\t\t".'public function get'.ucfirst($item).'() { '.$body.' }';
                }
            $methods[] = '';
            }
        }
    $ns = 'Thunder\\SimilarWebApi\\Response';
    $replaces = array(
        '<NAMESPACE>' => $ns,
        '<CLASS>' => $name,
        '<METHODS>' => implode("\n", $methods),
        );
    $code = str_replace(array_keys($replaces), array_values($replaces), $code);

    return $code;
    }

require_once(__DIR__.'/../vendor/autoload.php');
$mapping = Yaml::parse(file_get_contents(__DIR__.'/../mapping.yaml'));
if(!$mapping)
    {
    throw new \RuntimeException('Failed to read mapping file!');
    }

echo 'SimilarWeb API PHP Client :: [ Generating request classes ]'."\n";
foreach($mapping as $name => $config)
    {
    echo sprintf('  - %s', $name)."\n";
    $path = __DIR__.'/../src/Request/'.$name.'.php';
    $code = generateRequestClass($name, $config);
    @mkdir(dirname($path), 0777, true);
    file_put_contents($path, $code);
    }
echo 'SimilarWeb API PHP Client :: [ Generating response classes ]'."\n";
foreach($mapping as $name => $config)
    {
    echo sprintf('  - %s', $name)."\n";
    $path = __DIR__.'/../src/Response/'.$name.'.php';
    $code = generateResponseClass($name, $config);
    @mkdir(dirname($path), 0777, true);
    file_put_contents($path, $code);
    }
echo 'SimilarWeb API PHP Client :: [ Operation completed ]'."\n";
